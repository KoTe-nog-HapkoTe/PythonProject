import os
import time
import uuid
import base64
import asyncio
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from fusionbrain_sdk_python import AsyncFBClient, PipelineType

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ------------------------------------------ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GIGA_AUTH_KEY = os.getenv("GIGA_AUTH_KEY")
KANDINSKY_API_KEY = os.getenv("KANDINSKYAPIKEY")
KANDINSKY_SECRET_KEY = os.getenv("KANDINSKYSECRETKEY")
GIGA_SCOPE = os.getenv("GIGA_SCOPE", "GIGACHAT_API_PERS")
GIGA_CHAT_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

access_token = None
token_expires_at = 0
user_last_request = {}

#
#   ---------------------------------------------------- Cooldown
#
def can_make_request(user_id, cooldown_seconds=3600):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å.
    cooldown_seconds: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å
    """
    current_time = time.time()

    if user_id not in user_last_request:
        user_last_request[user_id] = current_time
        return True

    last_request_time = user_last_request[user_id]
    time_since_last_request = current_time - last_request_time

    if time_since_last_request >= cooldown_seconds:
        user_last_request[user_id] = current_time
        return True
    else:
        return False


def get_remaining_time(user_id, cooldown_seconds=3600):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    """
    if user_id not in user_last_request:
        return 0

    current_time = time.time()
    last_request_time = user_last_request[user_id]
    time_since_last_request = current_time - last_request_time

    if time_since_last_request >= cooldown_seconds:
        return 0
    else:
        remaining_seconds = cooldown_seconds - time_since_last_request
        return int(remaining_seconds / 60)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö

#
#   ---------------------------------------------------- GigaChat
#
def get_gigachat_token(auth_token, scope='GIGACHAT_API_PERS'):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω.
    """
    rq_uid = str(uuid.uuid4())
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': rq_uid,
        'Authorization': f'Basic {auth_token}'
    }

    payload = {
        'scope': scope
    }

    try:
        response = requests.post(url, headers=headers, data=payload, verify=False)
        response.raise_for_status()
        return response
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        raise


def get_access_token():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ GigaChat
    """
    global access_token, token_expires_at
    now = time.time()

    if access_token is None or now >= token_expires_at - 300:
        try:
            response = get_gigachat_token(GIGA_AUTH_KEY, GIGA_SCOPE)
            token_data = response.json()
            access_token = token_data['access_token']

            if 'expires_at' in token_data:
                token_expires_at = token_data['expires_at']
            else:
                token_expires_at = now + 1800

            print("–¢–æ–∫–µ–Ω GigaChat —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", e)
            raise

    return access_token

#
#   ---------------------------------------------------- Kandinsky
#

async def generate_cat_image(prompt):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Kandinsky API
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    """
    if not KANDINSKY_API_KEY or not KANDINSKY_SECRET_KEY:
        raise ValueError("Kandinsky API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async_client = AsyncFBClient(x_key=KANDINSKY_API_KEY, x_secret=KANDINSKY_SECRET_KEY)

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º pipeline –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        pipelines = await async_client.get_pipelines_by_type(PipelineType.TEXT2IMAGE)
        text2image_pipeline = pipelines[0]
        print(f"Using Kandinsky pipeline: {text2image_pipeline.name}")

        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        run_result = await async_client.run_pipeline(
            pipeline_id=text2image_pipeline.id,
            prompt=f"–ö—Ä–∞—Å–∏–≤—ã–π –∫–æ—Ç –ø–æ—Ä–æ–¥—ã {prompt}, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        )

        # 3. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞—Ç–∞, UUID: {run_result.uuid}")
        final_status = await async_client.wait_for_completion(
            request_id=run_result.uuid,
            initial_delay=run_result.status_time
        )

        if final_status.status == 'DONE':
            print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞!")

            if final_status.result and final_status.result.files:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ bytes
                image_data_base64 = final_status.result.files[0]
                image_data = base64.b64decode(image_data_base64)
                return image_data
            else:
                raise Exception("No images generated")
        else:
            raise Exception(f"Generation failed with status: {final_status.status}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise


async def get_cat_breed_from_gigachat():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∫–æ—Ç–∞ –æ—Ç GigaChat
    """
    prompt = "–ù–∞–∑–æ–≤–∏ –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –ø–æ—Ä–æ–¥—É –∫–æ—Ç–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–µ—á–∞–ª—å–Ω—ã–π –º–µ–π–Ω-–∫—É–Ω' –∏–ª–∏ '–ö–ª–æ—É–Ω—Å–∫–∏–π —Å–∏–∞–º–µ—Ü'. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤."

    try:
        token = get_access_token()

        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }

        payload = {
            "model": "GigaChat",
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 50
        }

        response = requests.post(
            GIGA_CHAT_URL,
            json=payload,
            headers=headers,
            verify=False,
            timeout=30
        )
        response.raise_for_status()

        response_data = response.json()
        cat_breed = response_data["choices"][0]["message"]["content"].strip()
        print("–û—Ç–≤–µ—Ç –æ—Ç GigaChat:", cat_breed)
        return cat_breed

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GigaChat:", e)
        raise


#
#   ---------------------------------------------------- UX/Events
#

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    print(f"[START] chat_id={chat_id}, user_id={user_id}")

    kb = [[KeyboardButton("–°–∫–∞–∑–∞—Ç—å –ø–æ—Ä–æ–¥—É –∫–æ—Ç–∞")]]
    markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)

    await update.message.reply_text(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —è –Ω–∞–∑–≤–∞–ª –ø–æ—Ä–æ–¥—É —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞ —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø–æ–∫–∞–∑–∞–ª –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
        reply_markup=markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    text = update.message.text
    print(f"[MSG] chat_id={chat_id}, user_id={user_id}, text={text}")

    if text == "–°–∫–∞–∑–∞—Ç—å –ø–æ—Ä–æ–¥—É –∫–æ—Ç–∞":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text("üê± –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Ä–æ–¥—É –∫–æ—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–¥—É –∫–æ—Ç–∞ –æ—Ç GigaChat
            cat_breed = await get_cat_breed_from_gigachat()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            image_data = await generate_cat_image(cat_breed)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
            await update.message.reply_photo(
                photo=image_data,
                caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ç: {cat_breed}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await processing_message.delete()
            
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            print(error_message)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ä–æ–¥–∞ –∫–æ—Ç–∞, –Ω–æ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if 'cat_breed' in locals():
                await update.message.reply_text(
                    f"–ü–æ—Ä–æ–¥–∞ –∫–æ—Ç–∞: {cat_breed}\n\n–ù–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üòø"
                )
            else:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—Ä–æ–¥—É –∫–æ—Ç–∞ –∏ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")

#
#   ---------------------------------------------------- Main
#

def main():
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    if not GIGA_AUTH_KEY:
        raise ValueError("GIGA_AUTH_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    if not KANDINSKY_API_KEY or not KANDINSKY_SECRET_KEY:
        print("Kandinsky API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat...")
        get_access_token()
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat: {e}")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
